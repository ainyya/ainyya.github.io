{
    "version": "https://jsonfeed.org/version/1",
    "title": "Hello My friend！",
    "subtitle": "",
    "icon": "https://ainyya.github.io/images/favicon.ico",
    "description": "",
    "home_page_url": "https://ainyya.github.io",
    "items": [
        {
            "id": "https://ainyya.github.io/2022/01/20/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/",
            "url": "https://ainyya.github.io/2022/01/20/%E9%81%97%E4%BC%A0%E7%AE%97%E6%B3%95/",
            "title": "遗传算法",
            "date_published": "2022-01-19T17:14:38.000Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://ainyya.github.io/2022/01/20/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-10-16/",
            "url": "https://ainyya.github.io/2022/01/20/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-10-16/",
            "title": "寒假每日一题[10-16]",
            "date_published": "2022-01-19T16:57:38.000Z",
            "content_html": "<h2 id=\"粉刷栅栏\"><a class=\"anchor\" href=\"#粉刷栅栏\">#</a> 粉刷栅栏</h2>\n<p>题目如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">农夫约翰发明了一种绝妙的方法来粉刷牛棚旁边的长栅栏（把栅栏想象成一维的数轴）。</span><br><span class=\"line\">他只需要在他最喜欢的奶牛贝茜身上挂一个刷子，然后在一旁悠闲的喝凉水就行了。</span><br><span class=\"line\">贝茜沿着栅栏来回走动时，会将她走过的栅栏部分涂上油漆。</span><br><span class=\"line\">贝茜从栅栏上的位置 0 处开始，共进行 N 次移动。</span><br><span class=\"line\">移动可能形如 10 L，表示向左移动 10 单位距离，也可能形如 15 R，表示向右移动 15 单位距离。</span><br><span class=\"line\">给定贝茜的 N 次移动列表，约翰想知道至少被涂抹了 2 层油漆的区域的总长度。</span><br><span class=\"line\">整个行进过程中，贝茜距离出发地的距离不会超过 10^9。</span><br><span class=\"line\"></span><br><span class=\"line\">输入格式</span><br><span class=\"line\">第一行包含一个整数 N。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来 N 行，每一行包含一个行动指令，诸如 10 L 或 15 R。</span><br><span class=\"line\"></span><br><span class=\"line\">输出格式</span><br><span class=\"line\">输出至少被涂抹了 2 层油漆的区域的总长度。</span><br><span class=\"line\"></span><br><span class=\"line\">数据范围</span><br><span class=\"line\">1≤N≤105</span><br><span class=\"line\">整个行进过程中，贝茜距离出发地的距离不会超过 109。</span><br><span class=\"line\">每次指令移动距离的取值范围是 [1,2×109]。</span><br><span class=\"line\"></span><br><span class=\"line\">输入样例：</span><br><span class=\"line\">6</span><br><span class=\"line\">2 R</span><br><span class=\"line\">6 L</span><br><span class=\"line\">1 R</span><br><span class=\"line\">8 L</span><br><span class=\"line\">1 R</span><br><span class=\"line\">2 R</span><br><span class=\"line\">输出样例：</span><br><span class=\"line\">6</span><br><span class=\"line\">样例解释</span><br><span class=\"line\">共有 6 单位长度的区域至少被涂抹 2 层油漆。</span><br><span class=\"line\">这些区域为 (−11,−8),(−4,−3),(0,2)。</span><br></pre></td></tr></table></figure></p>\n<p>读题：粉刷栅栏，寻找被粉刷过两次的栅栏。实际上用到的点 200000 个，但范围有些大 2 亿。所以不能使用朴素的差分算法，可以对其进行优化，使用 map。算法：二分 + map（离散化）。map 中存入点的下标和值。遍历 map 中的对，如果 value&gt;=2 说明这段就是我们需要寻找的。如何将区间转化为点呢？形式如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">区间：1     2     3     4     5     6</span><br><span class=\"line\">点值：   1     2     3     4     5</span><br></pre></td></tr></table></figure></p>\n<p>即第一段映射到第一个点，左闭右开。朴素的差分是在 b [l] ++, b [r + 1] --; 但是在这里只要 b [l] ++, b [r] --; 代码如下：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;map&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\">map&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">chafen</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;pos, <span class=\"keyword\">int</span> x, <span class=\"keyword\">char</span> dir)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dir == <span class=\"string\">&#x27;L&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mp[pos - x] ++;</span><br><span class=\"line\">        mp[pos] --;</span><br><span class=\"line\">        pos -= x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dir == <span class=\"string\">&#x27;R&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mp[pos] ++;</span><br><span class=\"line\">        mp[pos + x] --;</span><br><span class=\"line\">        pos += x;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> dir;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; dir;</span><br><span class=\"line\">        <span class=\"built_in\">chafen</span>(pos, x, dir);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>, L;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [k, v] : mp)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt;= <span class=\"number\">2</span>) ans += k - L;</span><br><span class=\"line\">        sum += v;</span><br><span class=\"line\">        L = k;</span><br><span class=\"line\">        <span class=\"comment\">/*if(sum &lt;= 1 &amp;&amp; sum + v &gt; 1) L = k; //如果sum 从比2小变到比2大，那么k值就是区间左端点</span></span><br><span class=\"line\"><span class=\"comment\">        else if(sum &gt; 1 &amp;&amp; sum + v &lt;= 1) ans += k - L; //反之就是区间右端点</span></span><br><span class=\"line\"><span class=\"comment\">        sum += v;//更新sum 的值*/</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    cout &lt;&lt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n",
            "tags": [
                "程序",
                "博客"
            ]
        },
        {
            "id": "https://ainyya.github.io/2022/01/17/%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95/",
            "url": "https://ainyya.github.io/2022/01/17/%E8%9A%81%E7%BE%A4%E7%AE%97%E6%B3%95/",
            "title": "蚁群算法",
            "date_published": "2022-01-17T03:27:44.000Z",
            "content_html": "<h2 id=\"简单知识点\"><a class=\"anchor\" href=\"#简单知识点\">#</a> 简单知识点</h2>\n<p>1. 介绍</p>\n<p>蚁群算法是一种用来寻找优化路径的概率型算法。其灵感来源于蚂蚁在寻找食物过程中发现路径的行为。这种算法具有分布计算、信息正反馈和启发式搜索的特征，本质上是进化算法中的一种启发式全局优化算法。</p>\n<p>2. 基本原理：</p>\n<p>​\t(1) 蚂蚁在携带等量的信息素一路释放</p>\n<p>​\t(2) 信息素浓度会和路径的长度成反比</p>\n<p>​\t(3) 下次蚂蚁来到该路口会选择信息素浓度较高的那条</p>\n<p>​\t(4) 短的路径上的信息素浓度会越来越大，最终成为蚁群的最优路径。</p>\n<p>3. 参数解析</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:center\">定义</th>\n<th style=\"text-align:center\">参数影响分析</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span></td>\n<td style=\"text-align:center\">信息启发式因子</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> 值越大，蚂蚁选择之前走过的路径可能性越大，搜索路径的随机性减弱，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> 越小，蚁群搜索范围就会减少，容易陷入局部最优</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span></td>\n<td style=\"text-align:center\">期望启发式因子</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span> 值越大，蚁群就越容易选择局部较短路径，这时算法的收敛速度是加快了，但是随机性却不高，容易得到局部的相对最优</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">m</td>\n<td style=\"text-align:center\">蚁群数量</td>\n<td style=\"text-align:center\">m 数目越多，得到的最优解就越精确，但是会产生不少重复解，随着算法接近最优值的收敛，信息正反馈作用降低，大量的重复工作，消耗了资源，增加了事件复杂度</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ρ</span></span></span></span></td>\n<td style=\"text-align:center\">信息挥发因子，1-\\rho 表示残留因子</td>\n<td style=\"text-align:center\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ρ</span></span></span></span> 过小时，在各路径上残留的信息素过多，导致无效的路径继续被搜索，影响到算法的收敛速率；<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ρ</mi></mrow><annotation encoding=\"application/x-tex\">\\rho</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">ρ</span></span></span></span> 过大，无效的路径虽然可以被排除搜索，但是不能保证有效的路径也会被放弃搜索，影响到最优值的搜索。</td>\n</tr>\n</tbody>\n</table>\n<p>4. 算法流程：</p>\n<p><img data-src=\"Post3_image1.png\" alt></p>\n<p>代码：</p>\n<p><figure class=\"highlight matlab\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%% I. 清空环境变量</span></span><br><span class=\"line\">clear all</span><br><span class=\"line\">clc</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%% II. 导入数据   31个城市的坐标</span></span><br><span class=\"line\">load citys_data.mat</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%% III. 计算城市间相互距离</span></span><br><span class=\"line\">n = <span class=\"built_in\">size</span>(citys,<span class=\"number\">1</span>); <span class=\"comment\">%城市个数</span></span><br><span class=\"line\">D = <span class=\"built_in\">zeros</span>(n,n); <span class=\"comment\">%%n * n的矩阵置为空（初始化矩阵）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:n</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">j</span> = <span class=\"number\">1</span>:n</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">i</span> ~= <span class=\"built_in\">j</span></span><br><span class=\"line\">            D(<span class=\"built_in\">i</span>,<span class=\"built_in\">j</span>) = <span class=\"built_in\">sqrt</span>(sum((citys(<span class=\"built_in\">i</span>,:) - citys(<span class=\"built_in\">j</span>,:)).^<span class=\"number\">2</span>));</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            D(<span class=\"built_in\">i</span>,<span class=\"built_in\">j</span>) = <span class=\"number\">1e-4</span>;        <span class=\"comment\">%用很小的值代替   0    公式需要</span></span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span>    </span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%% IV. 初始化参数</span></span><br><span class=\"line\">m = <span class=\"number\">50</span>;                              <span class=\"comment\">% 蚂蚁数量</span></span><br><span class=\"line\">alpha = <span class=\"number\">1</span>;                           <span class=\"comment\">% 信息素重要程度因子</span></span><br><span class=\"line\"><span class=\"built_in\">beta</span> = <span class=\"number\">5</span>;                            <span class=\"comment\">% 启发函数重要程度因子</span></span><br><span class=\"line\">rho = <span class=\"number\">0.1</span>;                           <span class=\"comment\">% 信息素挥发因子</span></span><br><span class=\"line\">Q = <span class=\"number\">1</span>;                               <span class=\"comment\">% 常系数</span></span><br><span class=\"line\">Eta = <span class=\"number\">1.</span>/D;                          <span class=\"comment\">% 启发函数</span></span><br><span class=\"line\">Tau = <span class=\"built_in\">ones</span>(n,n);                     <span class=\"comment\">% 信息素矩阵</span></span><br><span class=\"line\">Table = <span class=\"built_in\">zeros</span>(m,n);                  <span class=\"comment\">% 路径记录表    m个蚂蚁走过的路径</span></span><br><span class=\"line\">iter = <span class=\"number\">1</span>;                            <span class=\"comment\">% 迭代次数初值</span></span><br><span class=\"line\">iter_max = <span class=\"number\">200</span>;                      <span class=\"comment\">% 最大迭代次数 </span></span><br><span class=\"line\">Route_best = <span class=\"built_in\">zeros</span>(iter_max,n);      <span class=\"comment\">% 各代最佳路径       </span></span><br><span class=\"line\">Length_best = <span class=\"built_in\">zeros</span>(iter_max,<span class=\"number\">1</span>);     <span class=\"comment\">% 各代最佳路径的长度  </span></span><br><span class=\"line\">Length_ave = <span class=\"built_in\">zeros</span>(iter_max,<span class=\"number\">1</span>);      <span class=\"comment\">% 各代路径的平均长度  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%% V. 迭代寻找最佳路径</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> iter &lt;= iter_max</span><br><span class=\"line\">     <span class=\"comment\">% 随机产生各个蚂蚁的起点城市</span></span><br><span class=\"line\">      start = <span class=\"built_in\">zeros</span>(m,<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:m                         <span class=\"comment\">%50个蚂蚁随机产生的起始城市位置</span></span><br><span class=\"line\">          temp = randperm(n);</span><br><span class=\"line\">          start(<span class=\"built_in\">i</span>) = temp(<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      Table(:,<span class=\"number\">1</span>) = start;    <span class=\"comment\">%初始位置</span></span><br><span class=\"line\">      citys_index = <span class=\"number\">1</span>:n;     <span class=\"comment\">%城市索引取出来</span></span><br><span class=\"line\">      <span class=\"comment\">% 逐个蚂蚁路径选择</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:m</span><br><span class=\"line\">          <span class=\"comment\">% 逐个城市路径选择</span></span><br><span class=\"line\">         <span class=\"keyword\">for</span> <span class=\"built_in\">j</span> = <span class=\"number\">2</span>:n</span><br><span class=\"line\">             tabu = Table(<span class=\"built_in\">i</span>,<span class=\"number\">1</span>:(<span class=\"built_in\">j</span> - <span class=\"number\">1</span>));           <span class=\"comment\">% 已访问的城市集合(禁忌表)</span></span><br><span class=\"line\">             allow_index = ~<span class=\"built_in\">ismember</span>(citys_index,tabu);    <span class=\"comment\">%没有访问过的城市取出来</span></span><br><span class=\"line\">             allow = citys_index(allow_index);  <span class=\"comment\">% 待访问的城市集合</span></span><br><span class=\"line\">             P = allow;</span><br><span class=\"line\">             <span class=\"comment\">% 计算城市间转移概率</span></span><br><span class=\"line\">             <span class=\"keyword\">for</span> k = <span class=\"number\">1</span>:<span class=\"built_in\">length</span>(allow)</span><br><span class=\"line\">                 P(k) = Tau(tabu(<span class=\"keyword\">end</span>),allow(k))^alpha * Eta(tabu(<span class=\"keyword\">end</span>),allow(k))^<span class=\"built_in\">beta</span>;     <span class=\"comment\">%end代表最后一个元素   核心公式</span></span><br><span class=\"line\">             <span class=\"keyword\">end</span></span><br><span class=\"line\">             P = P/sum(P);</span><br><span class=\"line\">             <span class=\"comment\">% 轮盘赌法选择下一个访问城市</span></span><br><span class=\"line\">             Pc = cumsum(P);     </span><br><span class=\"line\">            target_index = <span class=\"built_in\">find</span>(Pc &gt;= <span class=\"built_in\">rand</span>); </span><br><span class=\"line\">            target = allow(target_index(<span class=\"number\">1</span>));</span><br><span class=\"line\">            Table(<span class=\"built_in\">i</span>,<span class=\"built_in\">j</span>) = target;         <span class=\"comment\">%记录下来，添加新访问的城市</span></span><br><span class=\"line\">         <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"comment\">% 计算各个蚂蚁的路径距离</span></span><br><span class=\"line\">      Length = <span class=\"built_in\">zeros</span>(m,<span class=\"number\">1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:m</span><br><span class=\"line\">          Route = Table(<span class=\"built_in\">i</span>,:);     <span class=\"comment\">%每个蚂蚁的路径取出来</span></span><br><span class=\"line\">          <span class=\"keyword\">for</span> <span class=\"built_in\">j</span> = <span class=\"number\">1</span>:(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">              Length(<span class=\"built_in\">i</span>) = Length(<span class=\"built_in\">i</span>) + D(Route(<span class=\"built_in\">j</span>),Route(<span class=\"built_in\">j</span> + <span class=\"number\">1</span>));</span><br><span class=\"line\">          <span class=\"keyword\">end</span></span><br><span class=\"line\">          Length(<span class=\"built_in\">i</span>) = Length(<span class=\"built_in\">i</span>) + D(Route(n),Route(<span class=\"number\">1</span>)); <span class=\"comment\">%%最后一段</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"comment\">% 计算最短路径距离及平均距离</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> iter == <span class=\"number\">1</span></span><br><span class=\"line\">          [min_Length,min_index] = <span class=\"built_in\">min</span>(Length);</span><br><span class=\"line\">          Length_best(iter) = min_Length;  </span><br><span class=\"line\">          Length_ave(iter) = <span class=\"built_in\">mean</span>(Length);</span><br><span class=\"line\">          Route_best(iter,:) = Table(min_index,:);</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">          [min_Length,min_index] = <span class=\"built_in\">min</span>(Length);</span><br><span class=\"line\">          Length_best(iter) = <span class=\"built_in\">min</span>(Length_best(iter - <span class=\"number\">1</span>),min_Length);</span><br><span class=\"line\">          Length_ave(iter) = <span class=\"built_in\">mean</span>(Length);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> Length_best(iter) == min_Length</span><br><span class=\"line\">              Route_best(iter,:) = Table(min_index,:);</span><br><span class=\"line\">          <span class=\"keyword\">else</span></span><br><span class=\"line\">              Route_best(iter,:) = Route_best((iter<span class=\"number\">-1</span>),:);</span><br><span class=\"line\">          <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      <span class=\"comment\">% 更新信息素</span></span><br><span class=\"line\">      Delta_Tau = <span class=\"built_in\">zeros</span>(n,n);</span><br><span class=\"line\">      <span class=\"comment\">% 逐个蚂蚁计算</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:m</span><br><span class=\"line\">          <span class=\"comment\">% 逐个城市计算</span></span><br><span class=\"line\">          <span class=\"keyword\">for</span> <span class=\"built_in\">j</span> = <span class=\"number\">1</span>:(n - <span class=\"number\">1</span>)</span><br><span class=\"line\">              Delta_Tau(Table(<span class=\"built_in\">i</span>,<span class=\"built_in\">j</span>),Table(<span class=\"built_in\">i</span>,<span class=\"built_in\">j</span>+<span class=\"number\">1</span>)) = Delta_Tau(Table(<span class=\"built_in\">i</span>,<span class=\"built_in\">j</span>),Table(<span class=\"built_in\">i</span>,<span class=\"built_in\">j</span>+<span class=\"number\">1</span>)) + Q/Length(<span class=\"built_in\">i</span>);</span><br><span class=\"line\">          <span class=\"keyword\">end</span></span><br><span class=\"line\">          Delta_Tau(Table(<span class=\"built_in\">i</span>,n),Table(<span class=\"built_in\">i</span>,<span class=\"number\">1</span>)) = Delta_Tau(Table(<span class=\"built_in\">i</span>,n),Table(<span class=\"built_in\">i</span>,<span class=\"number\">1</span>)) + Q/Length(<span class=\"built_in\">i</span>);</span><br><span class=\"line\">      <span class=\"keyword\">end</span></span><br><span class=\"line\">      Tau = (<span class=\"number\">1</span>-rho) * Tau + Delta_Tau;</span><br><span class=\"line\">    <span class=\"comment\">% 迭代次数加1，清空路径记录表</span></span><br><span class=\"line\">    iter = iter + <span class=\"number\">1</span>;</span><br><span class=\"line\">    Table = <span class=\"built_in\">zeros</span>(m,n);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%% VI. 结果显示</span></span><br><span class=\"line\">[Shortest_Length,index] = <span class=\"built_in\">min</span>(Length_best);</span><br><span class=\"line\">Shortest_Route = Route_best(index,:);</span><br><span class=\"line\"><span class=\"built_in\">disp</span>([<span class=\"string\">&#x27;最短距离:&#x27;</span> num2str(Shortest_Length)]);</span><br><span class=\"line\"><span class=\"built_in\">disp</span>([<span class=\"string\">&#x27;最短路径:&#x27;</span> num2str([Shortest_Route Shortest_Route(<span class=\"number\">1</span>)])]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">%% VII. 绘图     1960009019   l13299109228</span></span><br><span class=\"line\"><span class=\"built_in\">figure</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">plot</span>([citys(Shortest_Route,<span class=\"number\">1</span>);citys(Shortest_Route(<span class=\"number\">1</span>),<span class=\"number\">1</span>)],...</span><br><span class=\"line\">     [citys(Shortest_Route,<span class=\"number\">2</span>);citys(Shortest_Route(<span class=\"number\">1</span>),<span class=\"number\">2</span>)],<span class=\"string\">&#x27;o-&#x27;</span>);</span><br><span class=\"line\">grid on</span><br><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"built_in\">i</span> = <span class=\"number\">1</span>:<span class=\"built_in\">size</span>(citys,<span class=\"number\">1</span>)</span><br><span class=\"line\">    text(citys(<span class=\"built_in\">i</span>,<span class=\"number\">1</span>),citys(<span class=\"built_in\">i</span>,<span class=\"number\">2</span>),[<span class=\"string\">&#x27;   &#x27;</span> num2str(<span class=\"built_in\">i</span>)]);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">text(citys(Shortest_Route(<span class=\"number\">1</span>),<span class=\"number\">1</span>),citys(Shortest_Route(<span class=\"number\">1</span>),<span class=\"number\">2</span>),<span class=\"string\">&#x27;       起点&#x27;</span>);</span><br><span class=\"line\">text(citys(Shortest_Route(<span class=\"keyword\">end</span>),<span class=\"number\">1</span>),citys(Shortest_Route(<span class=\"keyword\">end</span>),<span class=\"number\">2</span>),<span class=\"string\">&#x27;       终点&#x27;</span>);</span><br><span class=\"line\">xlabel(<span class=\"string\">&#x27;城市位置横坐标&#x27;</span>)</span><br><span class=\"line\">ylabel(<span class=\"string\">&#x27;城市位置纵坐标&#x27;</span>)</span><br><span class=\"line\">title([<span class=\"string\">&#x27;蚁群算法优化路径(最短距离:&#x27;</span> num2str(Shortest_Length) <span class=\"string\">&#x27;)&#x27;</span>])</span><br><span class=\"line\"><span class=\"built_in\">figure</span>(<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">plot</span>(<span class=\"number\">1</span>:iter_max,Length_best,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"number\">1</span>:iter_max,Length_ave,<span class=\"string\">&#x27;r:&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">legend</span>(<span class=\"string\">&#x27;最短距离&#x27;</span>,<span class=\"string\">&#x27;平均距离&#x27;</span>)</span><br><span class=\"line\">xlabel(<span class=\"string\">&#x27;迭代次数&#x27;</span>)</span><br><span class=\"line\">ylabel(<span class=\"string\">&#x27;距离&#x27;</span>)</span><br><span class=\"line\">title(<span class=\"string\">&#x27;各代最短距离与平均距离对比&#x27;</span>)</span><br></pre></td></tr></table></figure></p>\n<hr>\n",
            "tags": [
                "数学建模",
                "博客"
            ]
        },
        {
            "id": "https://ainyya.github.io/2022/01/12/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%B3%BB%E5%88%97%E7%AC%AC%E4%B8%80%E8%AF%BE-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/",
            "url": "https://ainyya.github.io/2022/01/12/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1%E7%B3%BB%E5%88%97%E7%AC%AC%E4%B8%80%E8%AF%BE-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%A8%A1%E5%9E%8B/",
            "title": "数学建模系列第一课--层次分析模型",
            "date_published": "2022-01-11T16:13:03.000Z",
            "content_html": "<h3 id=\"基本套路\"><a class=\"anchor\" href=\"#基本套路\">#</a> 基本套路</h3>\n<p>题目中一般会出现” 确定评价指标、形成评价体系 “等关键子眼。首先要回答以下三个问题：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.我们评价的目标是什么？</span><br><span class=\"line\">2.我们为了达到这个目标有哪几种可选的方案？</span><br><span class=\"line\">3.评价的准则或者说知指标是什么？（我们根据什么东西来评价好坏）</span><br></pre></td></tr></table></figure></p>\n<p>推荐的搜索平台：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWFyY2guY2hvbmdidWx1by5jb20v\">虫部落 - 快搜</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25raS5uZXQv\">知网</span>、<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jcXZpcC5jb20v\">维普</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly94dWVzaHUuYmFpZHUuY29tLw==\">百度学术</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2FuZmFuZ2RhdGEuY29tLmNuL2luZGV4Lmh0bWw=\">万方</span></p>\n<p>判断矩阵：</p>\n<p><img data-src=\"Post2_image1.jpg\" alt=\"两两判断\"></p>\n<p><img data-src=\"Post2_image2.jpg\" alt=\"评价指标\"></p>\n<p>若矩阵中每个元素 <code>a_&#123;ij&#125;</code>  &gt; 0 且满足   <code>a_&#123;ij&#125;</code>   x   <code>a_&#123;ji&#125;</code>  = 1，则我们称该矩阵为正互反矩阵。在层次分析法中，我们构造的判断矩阵均是正互反矩阵。若正互反矩阵满足 <code>a_&#123;ij&#125;</code>  x  <code>a_&#123;jk&#125;</code>  =  <code>a_&#123;ik&#125;</code> ，则我们称其为一致矩阵。</p>\n",
            "tags": [
                "数学建模",
                "博客"
            ]
        },
        {
            "id": "https://ainyya.github.io/2022/01/11/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98[2-9]/",
            "url": "https://ainyya.github.io/2022/01/11/%E5%AF%92%E5%81%87%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98[2-9]/",
            "title": "寒假每日一题",
            "date_published": "2022-01-11T15:30:44.744Z",
            "content_html": "<h2 id=\"笨拙的手指\"><a class=\"anchor\" href=\"#笨拙的手指\">#</a> 笨拙的手指</h2>\n<p>题目：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">奶牛贝茜正在学习如何在不同进制之间转换数字。</span><br><span class=\"line\">但是她总是犯错误，因为她无法轻易的用两个前蹄握住笔。</span><br><span class=\"line\">每当贝茜将数字转换为一个新的进制并写下结果时，她总是将其中的某一位数字写错。</span><br><span class=\"line\"></span><br><span class=\"line\">例如，如果她将数字 <span class=\"number\">14</span></span><br><span class=\"line\">转换为二进制数，那么正确的结果应为 <span class=\"number\">1110</span>，但她可能会写下 <span class=\"number\">0110</span> 或 <span class=\"number\">1111</span>。</span><br><span class=\"line\">贝茜不会额外添加或删除数字，但是可能会由于写错数字的原因，写下包含前导 <span class=\"number\">0</span>的数字。</span><br><span class=\"line\"></span><br><span class=\"line\">给定贝茜将数字N转换为二进制数字以及三进制数字的结果，请确定 N的正确初始值（十进制表示）。</span><br><span class=\"line\"></span><br><span class=\"line\">输入格式</span><br><span class=\"line\"></span><br><span class=\"line\">第一行包含N的二进制表示，其中一位是错误的。</span><br><span class=\"line\"></span><br><span class=\"line\">第二行包含N的三进制表示，其中一位是错误的。</span><br><span class=\"line\"></span><br><span class=\"line\">输出格式</span><br><span class=\"line\">输出正确的N的值。</span><br><span class=\"line\">数据范围<span class=\"number\">0</span>≤N≤<span class=\"number\">10</span>^<span class=\"number\">9</span>，且存在唯一解。</span><br><span class=\"line\">时/空限制： <span class=\"number\">1</span>s / <span class=\"number\">64</span>MB</span><br><span class=\"line\">输入样例：</span><br><span class=\"line\"><span class=\"number\">1010</span></span><br><span class=\"line\"><span class=\"number\">212</span></span><br><span class=\"line\">输出样例：</span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\">样例解释</span><br><span class=\"line\"><span class=\"number\">14</span></span><br><span class=\"line\">在二进制下的正确表示为 <span class=\"number\">1110</span>，在三进制下的正确表示为 <span class=\"number\">112</span>。</span><br></pre></td></tr></table></figure></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS9wcm9ibGVtL2NvbnRlbnQvMjA2MC8=\">原题链接</span></p>\n<p>算法分析：</p>\n<p>这里先贴一个关于事件复杂度的分析表：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">一般ACM或者笔试题的时间限制是1秒或2秒。</span><br><span class=\"line\">在这种情况下，C++代码中的操作次数控制在 10^7∼10^8为最佳。</span><br><span class=\"line\"></span><br><span class=\"line\">下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择：</span><br><span class=\"line\"></span><br><span class=\"line\">1.n≤30, 指数级别, dfs+剪枝，状态压缩dp</span><br><span class=\"line\">2.n≤100=&gt; O(n3)，floyd，dp，高斯消元</span><br><span class=\"line\">3.n≤1000=&gt; O(n2)，O(n2logn)，dp，二分，朴素版Dijkstra、朴素版Prim、Bellman-Ford</span><br><span class=\"line\">4.n≤10000=&gt; O(n∗n√)，块状链表、分块、莫队</span><br><span class=\"line\">5.n≤100000=&gt; O(nlogn)=&gt; 各种sort，线段树、树状数组、set/map、heap、拓扑排序、dijkstra+heap、prim+heap、Kruskal、       spfa、求凸包、求半平面交、二分、CDQ分治、整体二分、后缀数组、树链剖分、动态树</span><br><span class=\"line\">6.n≤1000000=&gt; O(n), 以及常数较小的 O(nlogn) 算法 =&gt; 单调队列、 hash、双指针扫描、并查集，kmp、AC自动机，常数比较小的       O(nlogn)的做法：sort、树状数组、heap、dijkstra、spfa</span><br><span class=\"line\">7.n≤10000000=&gt; O(n)，双指针扫描、kmp、AC自动机、线性筛素数</span><br><span class=\"line\">8.n≤10^9=&gt; O(n√)，判断质数</span><br><span class=\"line\">9.n≤10^18=&gt; O(logn)，最大公约数，快速幂，数位DP</span><br><span class=\"line\">10.n≤10^1000=&gt; O((logn)2)，高精度加减乘除</span><br><span class=\"line\">11.n≤10^100000=&gt; O(logk×loglogk)，k表示位数，高精度加减、FFT/NTT</span><br></pre></td></tr></table></figure></p>\n<p>根据题目所给的数据范围，很明显我们不能通过暴力枚举的方式进行筛选。但是我们可以换个思路，$$ 10^9 $$ 的二进制位数大概是 30 位，转为 10 进制也是将这 30 位遍历，所以时间复杂度是 1000 级别的。同理，三进制转 10 进制也是 1000 级别的。这样子，我们就可以筛选出较少的数据进行比较。这里，我们用到了的哈希表，先往哈希表中插入二进制的不同十进制数，然后改变三进制数，在哈希表中查找是否存在与这个三进制数对应的十进制数，如果有则说明找到原来的数字，否则不存在返回 0。</p>\n<p>完整代码如下：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unordered_set&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*秦九邵算法*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(string s, <span class=\"keyword\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; c : s)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        res = res * b + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    string a, b;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    </span><br><span class=\"line\">    unordered_set&lt;<span class=\"keyword\">int</span>&gt; S;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; c : a)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        c ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">        S.<span class=\"built_in\">insert</span>(<span class=\"built_in\">get</span>(a, <span class=\"number\">2</span>));</span><br><span class=\"line\">        c ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span>&amp; c : b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">char</span> t = c;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + <span class=\"string\">&#x27;0&#x27;</span> != t)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                c = i + <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = <span class=\"built_in\">get</span>(b, <span class=\"number\">3</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (S.<span class=\"built_in\">count</span>(x))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    cout &lt;&lt; x &lt;&lt; endl;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            c = t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"干草堆\"><a class=\"anchor\" href=\"#干草堆\">#</a> 干草堆</h2>\n<p>题目如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">贝茜对她最近在农场周围造成的一切恶作剧感到抱歉，她同意帮助农夫约翰把一批新到的干草捆堆起来。</span><br><span class=\"line\">开始时，共有 N 个空干草堆，编号 1∼N。</span><br><span class=\"line\">约翰给贝茜下达了 K 个指令，每条指令的格式为 A B，这意味着贝茜要在 A..B 范围内的每个干草堆的顶部添加一个新的干草捆。</span><br><span class=\"line\">例如，如果贝茜收到指令 10 13，则她应在干草堆 10,11,12,13 中各添加一个干草捆。</span><br><span class=\"line\">在贝茜完成了所有指令后，约翰想知道 N 个干草堆的中值高度——也就是说，如果干草堆按照高度从小到大排列，位于中间的干草堆的高度。</span><br><span class=\"line\">方便起见，N 一定是奇数，所以中间堆是唯一的。</span><br><span class=\"line\">请帮助贝茜确定约翰问题的答案。</span><br><span class=\"line\"></span><br><span class=\"line\">输入格式</span><br><span class=\"line\">第一行包含 N 和 K。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来 K 行，每行包含两个整数 A,B，用来描述一个指令。</span><br><span class=\"line\"></span><br><span class=\"line\">输出格式</span><br><span class=\"line\">输出完成所有指令后，N 个干草堆的中值高度。</span><br><span class=\"line\"></span><br><span class=\"line\">数据范围</span><br><span class=\"line\">1≤N≤106,</span><br><span class=\"line\">1≤K≤25000,</span><br><span class=\"line\">1≤A≤B≤N</span><br><span class=\"line\"></span><br><span class=\"line\">输入样例：</span><br><span class=\"line\">7 4</span><br><span class=\"line\">5 5</span><br><span class=\"line\">2 4</span><br><span class=\"line\">4 6</span><br><span class=\"line\">3 5</span><br><span class=\"line\">输出样例：</span><br><span class=\"line\">1</span><br><span class=\"line\">样例解释</span><br><span class=\"line\">贝茜完成所有指令后，各堆高度为 0,1,2,3,3,1,0。</span><br><span class=\"line\"></span><br><span class=\"line\">将各高度从小到大排序后，得到 0,0,1,1,2,3,3，位于中间的是 1。</span><br><span class=\"line\"></span><br><span class=\"line\">难度：简单</span><br><span class=\"line\">时/空限制：1s / 64MB</span><br><span class=\"line\">总通过数：3825</span><br><span class=\"line\">总尝试数：8041</span><br><span class=\"line\">来源：USACO 2012 January Contest Bronze Division</span><br><span class=\"line\">算法标签</span><br></pre></td></tr></table></figure></p>\n<p>采用差分算法思想，最后对差分数组求前缀和，再进行排序就可以得到中位数。</p>\n<p>首先我们要构造出差分数组，如果在差分数组的某段区间的头元素加上一个常量 c，则在求前缀和时，这一段区间的所有前缀和都会加上这个常量 c。为了将其限制在某一段区间内，可以在区间最后一个元素的下一个元素 - c 就可以了。</p>\n<p>代码如下：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1000010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (m -- )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l, r;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;l, &amp;r);</span><br><span class=\"line\">        b[l] ++, b[r + <span class=\"number\">1</span>] --;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++) b[i] += b[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">nth_element</span>(b + <span class=\"number\">1</span>, b + n / <span class=\"number\">2</span> + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, b[n / <span class=\"number\">2</span> + <span class=\"number\">1</span>]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"奶牛选美\"><a class=\"anchor\" href=\"#奶牛选美\">#</a> 奶牛选美</h2>\n<p>题目如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">听说最近两斑点的奶牛最受欢迎，约翰立即购进了一批两斑点牛。</span><br><span class=\"line\">不幸的是，时尚潮流往往变化很快，当前最受欢迎的牛变成了一斑点牛。</span><br><span class=\"line\">约翰希望通过给每头奶牛涂色，使得它们身上的两个斑点能够合为一个斑点，让它们能够更加时尚。</span><br><span class=\"line\">牛皮可用一个 N×M 的字符矩阵来表示，如下所示：</span><br><span class=\"line\"></span><br><span class=\"line\">................</span><br><span class=\"line\">..XXXX....XXX...</span><br><span class=\"line\">...XXXX....XX...</span><br><span class=\"line\">.XXXX......XXX..</span><br><span class=\"line\">........XXXXX...</span><br><span class=\"line\">.........XXX....</span><br><span class=\"line\">其中，X 表示斑点部分。</span><br><span class=\"line\">如果两个 X 在垂直或水平方向上相邻（对角相邻不算在内），则它们属于同一个斑点，由此看出上图中恰好有两个斑点。</span><br><span class=\"line\">约翰牛群里所有的牛都有两个斑点。</span><br><span class=\"line\">约翰希望通过使用油漆给奶牛尽可能少的区域内涂色，将两个斑点合为一个。</span><br><span class=\"line\">在上面的例子中，他只需要给三个 . 区域内涂色即可（新涂色区域用 ∗ 表示）：</span><br><span class=\"line\"></span><br><span class=\"line\">................</span><br><span class=\"line\">..XXXX....XXX...</span><br><span class=\"line\">...XXXX*...XX...</span><br><span class=\"line\">.XXXX..**..XXX..</span><br><span class=\"line\">........XXXXX...</span><br><span class=\"line\">.........XXX....</span><br><span class=\"line\">请帮助约翰确定，为了使两个斑点合为一个，他需要涂色区域的最少数量。</span><br><span class=\"line\"></span><br><span class=\"line\">输入格式</span><br><span class=\"line\">第一行包含两个整数 N 和 M。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来 N 行，每行包含一个长度为 M 的由 X 和 . 构成的字符串，用来表示描述牛皮图案的字符矩阵。</span><br><span class=\"line\"></span><br><span class=\"line\">输出格式</span><br><span class=\"line\">输出需要涂色区域的最少数量。</span><br><span class=\"line\"></span><br><span class=\"line\">数据范围</span><br><span class=\"line\">1≤N,M≤50</span><br><span class=\"line\">输入样例：</span><br><span class=\"line\">6 16</span><br><span class=\"line\">................</span><br><span class=\"line\">..XXXX....XXX...</span><br><span class=\"line\">...XXXX....XX...</span><br><span class=\"line\">.XXXX......XXX..</span><br><span class=\"line\">........XXXXX...</span><br><span class=\"line\">.........XXX....</span><br><span class=\"line\">输出样例：</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure></p>\n<p>这题算法思想是搜索，找到两个不连通块中的距离最近的两个点之间的曼哈顿据距离。</p>\n<p>深度优先搜索，记录叶子节点的坐标，然后通过计算筛选出最近的两个点。</p>\n<p>代码如下：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> T = pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">60</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">char</span> g[N][N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> st[N][N];</span><br><span class=\"line\">vector&lt;T&gt; block[<span class=\"number\">2</span>]; <span class=\"comment\">//保存点坐标</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(vector&lt;T&gt;&amp; block, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st[x][y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    block.<span class=\"built_in\">push_back</span>(&#123;x, y&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dt = x + dx[i], dc = y + dy[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (st[dt][dc] || dt &lt; <span class=\"number\">1</span> || dt &gt; n || dc &lt; <span class=\"number\">1</span> || dc &gt; m || g[dt][dc] == <span class=\"string\">&#x27;.&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(block, dt, dc);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++) cin &gt;&gt; (g[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, which = <span class=\"number\">0</span>; i &lt;= n; i ++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j ++)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!st[i][j] &amp;&amp; g[i][j] == <span class=\"string\">&#x27;X&#x27;</span>)</span><br><span class=\"line\">                <span class=\"built_in\">dfs</span>(block[which ++], i, j);</span><br><span class=\"line\">                </span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1e9</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (T &amp; a : block[<span class=\"number\">0</span>])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (T &amp; b : block[<span class=\"number\">1</span>])</span><br><span class=\"line\">            res = <span class=\"built_in\">min</span>(<span class=\"built_in\">abs</span>(a.first - b.first) + <span class=\"built_in\">abs</span>(a.second - b.second) , res);</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; res - <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"拖拉机\"><a class=\"anchor\" href=\"#拖拉机\">#</a> 拖拉机</h2>\n<p>题目如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">干了一整天的活，农夫约翰完全忘记了他把拖拉机落在田地中央了。</span><br><span class=\"line\">他的奶牛非常调皮，决定对约翰来场恶作剧。</span><br><span class=\"line\">她们在田地的不同地方放了 N 捆干草，这样一来，约翰想要开走拖拉机就必须先移除一些干草捆。</span><br><span class=\"line\">拖拉机的位置以及 N 捆干草的位置都是二维平面上的整数坐标点。</span><br><span class=\"line\">拖拉机的初始位置上没有干草捆。</span><br><span class=\"line\">当约翰驾驶拖拉机时，他只能沿平行于坐标轴的方向（北，南，东和西）移动拖拉机，并且拖拉机必须每次移动整数距离。</span><br><span class=\"line\">例如，驾驶拖拉机先向北移动 2 单位长度，然后向东移动 3 单位长度。</span><br><span class=\"line\">拖拉机无法移动到干草捆占据的位置。</span><br><span class=\"line\"></span><br><span class=\"line\">请帮助约翰确定他需要移除的干草捆的最小数量，以便他能够将拖拉机开到二维平面的原点。</span><br><span class=\"line\"></span><br><span class=\"line\">输入格式</span><br><span class=\"line\">第一行包含三个整数：N 以及拖拉机的初始位置 (x,y)。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来 N 行，每行包含一个干草捆的位置坐标 (x,y)。</span><br><span class=\"line\"></span><br><span class=\"line\">输出格式</span><br><span class=\"line\">输出约翰需要移除的干草捆的最小数量。</span><br><span class=\"line\"></span><br><span class=\"line\">数据范围</span><br><span class=\"line\">1≤N≤50000,</span><br><span class=\"line\">1≤x,y≤1000</span><br><span class=\"line\">输入样例：</span><br><span class=\"line\">7 6 3</span><br><span class=\"line\">6 2</span><br><span class=\"line\">5 2</span><br><span class=\"line\">4 3</span><br><span class=\"line\">2 1</span><br><span class=\"line\">7 3</span><br><span class=\"line\">5 4</span><br><span class=\"line\">6 4</span><br><span class=\"line\">输出样例：</span><br><span class=\"line\">1</span><br></pre></td></tr></table></figure></p>\n<p>注意：这一题路径是可以走到数组的外面，即范围为 0~1001。</p>\n<p>做算法题的步骤：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">1.读题</span><br><span class=\"line\">2.建立抽象模型</span><br><span class=\"line\">3.转化成学过的模型</span><br></pre></td></tr></table></figure></p>\n<p>本题可以抽象成矩阵模型，转化成点权的最短路径问题，算法是迪杰斯特拉最短路径算法。移除障碍物的最小数量等价于从起点到终点的最短距离。设有障碍物的点的权值为 1，空地为 0，所以可以使用双端队列广搜使问题的时间复杂度转化为线性。权值为 1 的点坐标加到队列的后端，权值为 0 的点坐标加到队列的前端。</p>\n<p>代码如下：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;deque&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> T = pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">bool</span> g[N][N], st[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dist[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">bfs</span><span class=\"params\">(<span class=\"keyword\">int</span> sx, <span class=\"keyword\">int</span> sy)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    deque&lt;T&gt; t;</span><br><span class=\"line\">    t.<span class=\"built_in\">push_back</span>(&#123;sx, sy&#125;);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dist, <span class=\"number\">0x3f</span>, <span class=\"keyword\">sizeof</span> dist);</span><br><span class=\"line\">    dist[sx][sy] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;, dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> q = t.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        t.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(st[q.first][q.second]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        st[q.first][q.second] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!q.first &amp;&amp; !q.second) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x = q.first + dx[i], y = q.second + dy[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt;= <span class=\"number\">0</span> &amp;&amp; x &lt; N &amp;&amp; y &gt;= <span class=\"number\">0</span> &amp;&amp; y &lt; N)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> w = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (g[x][y]) w = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dist[x][y] &gt; dist[q.first][q.second] + w)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dist[x][y] = dist[q.first][q.second] + w;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!w) t.<span class=\"built_in\">push_front</span>(&#123;x, y&#125;);</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> t.<span class=\"built_in\">push_back</span>(&#123;x, y&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dist[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n, sx, sy;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;sx, &amp;sy);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n --)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">        g[x][y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">bfs</span>(sx, sy));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"岛\"><a class=\"anchor\" href=\"#岛\">#</a> 岛</h2>\n<p>题目如下：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">每当下雨时，农夫约翰的田地总是被洪水淹没。</span><br><span class=\"line\">由于田地不是完全水平的，所以一些地方充满水后，留下了许多被水隔开的“岛”。</span><br><span class=\"line\">约翰的田地被描述为由 N 个连续高度值 H1,…,HN 指定的一维场景。</span><br><span class=\"line\">假设该场景被无限高的围墙包围着，请考虑暴雨期间发生的情况：</span><br><span class=\"line\">最低处首先被水覆盖，形成一些不连贯的岛，随着水位的不断上升，这些岛最终都会被覆盖。</span><br><span class=\"line\">一旦水位等于一块田地的高度，那块田地就被认为位于水下。</span><br><span class=\"line\"></span><br><span class=\"line\">![](fig_islands.png)</span><br><span class=\"line\"></span><br><span class=\"line\">上图显示了一个示例：在左图中，我们只加入了刚好超过 <span class=\"number\">1</span> 单位的水，此时剩下 <span class=\"number\">4</span> 个岛（最大岛屿剩余数量），而在右图中，我们共加入了 <span class=\"number\">7</span> 单位的水，此时仅剩下 <span class=\"number\">2</span> 个岛。</span><br><span class=\"line\"></span><br><span class=\"line\">请计算，暴风雨期间我们能在某个时间点看到的最大岛屿数量。</span><br><span class=\"line\">水会一直上升到所有田地都在水下。</span><br><span class=\"line\"></span><br><span class=\"line\">输入格式</span><br><span class=\"line\">第一行包含整数 N。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来 N 行，每行包含一个整数表示 Hi。</span><br><span class=\"line\"></span><br><span class=\"line\">输出格式</span><br><span class=\"line\">输出暴风雨期间我们能在某个时间点看到的最大岛屿数量。</span><br><span class=\"line\"></span><br><span class=\"line\">数据范围</span><br><span class=\"line\"><span class=\"number\">1</span>≤N≤<span class=\"number\">10</span>^<span class=\"number\">5</span>,</span><br><span class=\"line\"><span class=\"number\">1</span>≤Hi≤<span class=\"number\">10</span>^<span class=\"number\">9</span></span><br><span class=\"line\">输入样例：</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">输出样例：</span><br><span class=\"line\"><span class=\"number\">4</span></span><br></pre></td></tr></table></figure></p>\n<p>N 为 10 万，参考上面的时间复杂度参考表，本题要求做到线性或者是 nlogn 的复杂度。</p>\n<p>首先来分析小岛数量变换的 4 种情况：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">①：当本小岛的高度大于它左边小岛的高度，小于它右边小岛的高度，此时如果水淹没了它左边小岛，则它及它右边小岛构成一个小岛。在水淹没之前，这三个小岛构成一个岛，而淹没之后剩下的两个依然是一个岛，如果再淹没本小岛，原来岛的数量不变，并不会增加或者减少岛的数量，所以贡献值为0。（不考虑）</span><br><span class=\"line\">②：当本小岛的高度小于它左边小岛的高度，大于它右边小岛的高度，此时如果水淹没了它右边小岛，则它及它左边小岛构成一个小岛。在水淹没之前，这三个小岛构成一个岛，而淹没之后剩下的两个依然是一个岛，如果再淹没本小岛，原来岛的数量不变，并不会增加或者减少岛的数量，所以贡献值为0。（不考虑）</span><br><span class=\"line\">③：当本小岛的高度大于它左边和右边小岛的高度，如果淹没本小岛，则岛数减1。</span><br><span class=\"line\">④：当本小岛的高度小于它左边和右边小岛的高度，如果淹没本小岛，则岛数加1。</span><br></pre></td></tr></table></figure></p>\n<p>然后我们考虑，在远处存在一个和本小岛高度一致的小岛，它也会对最大岛的数量产生影响，即加一和减一操作。此时为了避免一加一减导致答案发生改变，我们需要使用 max 函数来判定，最终得到最大值。</p>\n<p>优化：在读入岛的高度（使用数组存）时，可以把相邻的高度相等的岛合并为一个岛，水的高度直接从高度最低的岛开始往上加。使用 C++ 的 unique 函数使得某区间内的高度值唯一（使用 pair 存），我们还要用到排序，因为水是从下往上增加高度的。在比较相邻岛的高度时，回归高度数组，因为 unique 只是帮助我们做了优化。</p>\n<p>代码如下：</p>\n<p><figure class=\"highlight c\"><figcaption><span>++</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> x first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> y second</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"built_in\">pair</span>&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; PII;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> h[N];</span><br><span class=\"line\">PII q[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class=\"line\">    </span><br><span class=\"line\">    n = unique(h + <span class=\"number\">1</span>, h + n + <span class=\"number\">1</span>) - h - <span class=\"number\">1</span>;  <span class=\"comment\">//判重</span></span><br><span class=\"line\">    h[n + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;  <span class=\"comment\">//第n+1个位置置为0，因为unique只是把前n个不重复的值放到数组的前面。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++) q[i] = &#123;h[i], i&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    sort(q + <span class=\"number\">1</span>, q + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">int</span> res = <span class=\"number\">1</span>, cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = q[i].y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (h[k - <span class=\"number\">1</span>] &lt; h[k] &amp;&amp; h[k + <span class=\"number\">1</span>] &lt; h[k]) cnt --;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (h[k - <span class=\"number\">1</span>] &gt; h[k] &amp;&amp; h[k + <span class=\"number\">1</span>] &gt; h[k]) cnt ++;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q[i].x != q[i + <span class=\"number\">1</span>].x)</span><br><span class=\"line\">            res = max(res, cnt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, res);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"马蹄铁\"><a class=\"anchor\" href=\"#马蹄铁\">#</a> 马蹄铁</h2>\n<p>题目如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">尽管奶牛贝茜发现每个平衡括号字符串都很美观，但她特别喜欢被她称为“完全”平衡的括号字符串----一个由 ( 构成的字符串后接一个长度相同的 ) 构成的字符串。</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\"></span><br><span class=\"line\">(((())))</span><br><span class=\"line\">有一天，当贝茜穿过牛棚时，她发现地面上有一个 N×N 的马蹄铁矩阵。每个马蹄铁的方向都看上去像 ( 或 )。</span><br><span class=\"line\">从矩阵的左上角开始，贝茜希望四处走动以拾起马蹄铁，使得她捡起的马蹄铁按顺序构成的括号字符串是完全平衡的。</span><br><span class=\"line\">请计算她能得到的最长完全平衡括号字符串的长度。</span><br><span class=\"line\">每一步中，贝茜可以沿上下左右四个方向移动。</span><br><span class=\"line\">她只能移动到包含马蹄铁的方格区域内，当她进入该区域时就会拿起那里的马蹄铁，并无法再次回到该位置（因为该位置没有马蹄铁了）。</span><br><span class=\"line\">她首先拿起的是左上角的马蹄铁。</span><br><span class=\"line\">由于她拿起的马蹄铁要形成一个完全平衡的字符串，因此她可能无法将所有马蹄铁都拿起来。</span><br><span class=\"line\"></span><br><span class=\"line\">输入格式</span><br><span class=\"line\">第一行包含整数 N。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来 N 行，每行包含一个长度为 N 的括号字符串，用来表示括号矩阵。</span><br><span class=\"line\"></span><br><span class=\"line\">输出格式</span><br><span class=\"line\">输出她能得到的最长完全平衡括号字符串的长度。</span><br><span class=\"line\"></span><br><span class=\"line\">如果无法得到完全平衡括号字符串（例如，左上角马蹄铁形如 )），则输出 0。</span><br><span class=\"line\"></span><br><span class=\"line\">数据范围</span><br><span class=\"line\">2≤N≤5</span><br><span class=\"line\">输入样例：</span><br><span class=\"line\">4</span><br><span class=\"line\">(())</span><br><span class=\"line\">()((</span><br><span class=\"line\">(()(</span><br><span class=\"line\">))))</span><br><span class=\"line\">输出样例：</span><br><span class=\"line\">8</span><br><span class=\"line\">样例解释</span><br><span class=\"line\">贝茜的移动步骤如下：</span><br><span class=\"line\"></span><br><span class=\"line\">1())</span><br><span class=\"line\">2)((</span><br><span class=\"line\">345(</span><br><span class=\"line\">876)</span><br></pre></td></tr></table></figure></p>\n<p>由于题目中 N 较小，可以选择暴力搜索。如果左括号的数目等于右括号的数目，输出走过字符的数量。如果当前字符是右括号，下一个字符是左括号则不继续往下走。而如果当前字符是左括号，则下一个字符是任意的。当然，如果第一个字符是右括号则无需搜索。</p>\n<p>代码如下：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> g[N][N];</span><br><span class=\"line\"><span class=\"keyword\">bool</span> st[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dx[<span class=\"number\">4</span>] = &#123;<span class=\"number\">-1</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>&#125;, dy[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st[x][y] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l == r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, l + r);</span><br><span class=\"line\">        st[x][y] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> dc = x + dx[i], dr = y + dy[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dc &gt;= <span class=\"number\">0</span> &amp;&amp; dc &lt; n &amp;&amp; dr &gt;= <span class=\"number\">0</span> &amp;&amp; dr &lt; n &amp;&amp; !st[dc][dr])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g[x][y] == <span class=\"string\">&#x27;)&#x27;</span> &amp;&amp; g[dc][dr] == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (g[dc][dr] == <span class=\"string\">&#x27;(&#x27;</span>) <span class=\"built_in\">dfs</span>(dc, dr, l + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"built_in\">dfs</span>(dc, dr, l, r + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    st[x][y] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i ++) cin &gt;&gt; g[i];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (g[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"string\">&#x27;(&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"打乱字母\"><a class=\"anchor\" href=\"#打乱字母\">#</a> 打乱字母</h2>\n<p>题目如下：</p>\n<p><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">农夫约翰将按字典序排列的 N 头奶牛的名字列表贴在了牛棚的门上。</span><br><span class=\"line\">每个奶牛的名字都由一个长度介于 1 到 20 之间的由小写字母构成的唯一字符串表示。</span><br><span class=\"line\">麻烦制造者贝茜将列表中的奶牛名字重新排序打乱了列表。</span><br><span class=\"line\">此外，她还对每头奶牛的名字中的字母顺序进行了重新排列（也可能保持不变）。</span><br><span class=\"line\">给定修改过后的列表，请帮助约翰确定列表中的每个名字可能出现在原始列表中的最低和最高位置。</span><br><span class=\"line\"></span><br><span class=\"line\">输入格式</span><br><span class=\"line\">第一行包含整数 N。</span><br><span class=\"line\"></span><br><span class=\"line\">接下来 N 行，按照修改过后列表的顺序，给出了修改过后的奶牛的名字。</span><br><span class=\"line\"></span><br><span class=\"line\">输出格式</span><br><span class=\"line\">共 N 行，第 i 行输出给定的第 i 个字符串在原始列表中可能的最低和最高位置。</span><br><span class=\"line\"></span><br><span class=\"line\">数据范围</span><br><span class=\"line\">1≤N≤50000</span><br><span class=\"line\">输入样例：</span><br><span class=\"line\">4</span><br><span class=\"line\">essieb</span><br><span class=\"line\">a</span><br><span class=\"line\">xzy</span><br><span class=\"line\">elsie</span><br><span class=\"line\">输出样例：</span><br><span class=\"line\">2 3</span><br><span class=\"line\">1 1</span><br><span class=\"line\">4 4</span><br><span class=\"line\">2 3</span><br><span class=\"line\">样例解释</span><br><span class=\"line\">无论如何，字符串 “a” 必然出现在原始列表中第一个，类似的，字符串 “xzy” 必然出现在原始列表中的最后一个</span><br><span class=\"line\">而字符串 “essieb” 和 “elsie” 都有可能位于原始列表的第 2 位或第 3 位，这取决于它们的原始字母顺序。</span><br><span class=\"line\">例如，”bessie” 和 “elsie” 分别位于 2,3 位，”sisbee” 和 “ilees” 分别位于 3,2 位。</span><br></pre></td></tr></table></figure></p>\n<p>读题：N = 50000，时间复杂度做到 nlogn，输出可能的最低和最高位置，所以大胆假设使用贪心算法，至于算法的合理性<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYWN3aW5nLmNvbS92aWRlby8zNjYyLw==\">参考这里</span>。初始化字符串数组 a，b 中存放每个原字符串中字符降序组成的字符串再对其排序，c 中存放每个原字符串中字符升序序组成的字符串再对其排序。接下来我们遍历数组 a 中的每一个字符串，看看它在 b 中的位置（我们遍历到的这个字符串，它的 b 类型的字符串位置并不会影响到它最终所要插入的位置，因为 b 中的字符串是原字符串中字符构造出的最大的字符串（可以把字符的顺序看成是一个数字），即原始字符串一定小于它的字符构造出的最大的字符串，所以这里无需删除最大的字符串）。相反，我们遍历数组 a 中的每一个字符串，看看它在 c 中的位置（我们遍历到的这个字符串，它的 b 类型的字符串位置会影响到它最终所要插入的位置，因为 b 中的字符串是原字符串中字符构造出的最小的字符串（可以把字符的顺序看成是一个数字），即原始字符串一定大于它的字符构造出的最小的字符串，原始字符串先插入到 k+1 的位置上，再删除它的字符构造出的最小的字符串（位置小于 k+1），在其后面的元素都得往前一个位置，所以原始字符串还是插入到 c 中的第 k 个位置上）。由于时间复杂度的限制，所以这里需要使用二分来查找元素插入的位置，代码如下：</p>\n<p><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">50010</span>;</span><br><span class=\"line\">string a[N], b[N], c[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        b[i] = c[i] = a[i];</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(b[i].<span class=\"built_in\">begin</span>(), b[i].<span class=\"built_in\">end</span>(), greater&lt;<span class=\"keyword\">char</span>&gt;());</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(c[i].<span class=\"built_in\">begin</span>(), c[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(c + <span class=\"number\">1</span>, c + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i ++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(a[i].<span class=\"built_in\">begin</span>(), a[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b[mid] &gt;= a[i]) r = mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; r &lt;&lt; <span class=\"string\">&#x27; &#x27;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(a[i].<span class=\"built_in\">begin</span>(), a[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        l = <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> mid = l + r + <span class=\"number\">1</span> &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c[mid] &lt;= a[i]) l = mid;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; r &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n",
            "tags": [
                "程序",
                "博客"
            ]
        },
        {
            "id": "https://ainyya.github.io/2022/01/11/hello-world/",
            "url": "https://ainyya.github.io/2022/01/11/hello-world/",
            "title": "Hello World",
            "date_published": "2022-01-11T08:41:56.944Z",
            "content_html": "<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n",
            "tags": []
        }
    ]
}